{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators.ts","components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","Textarea","input","meta","props","hasError","touched","error","className","styles","formControl","Input","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","restProps","to","DialogItem","s","dialog","src","avatar","alt","nav","id","name","Message","message","maxLength50","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","compose","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageAC","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItem","formData"],"mappings":"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","file":"static/js/6.4d39aa12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Nv7S\",\"error\":\"FormsControls_error__2VzmY\",\"formSummaryError\":\"FormsControls_formSummaryError__aOmkg\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\ntype InputType = {\r\n    name: string\r\n    onBlur: ()=>void\r\n    onChange: ()=>void\r\n    onDragStart: ()=>void\r\n    onDrop: ()=>void\r\n    onFocus: ()=>void\r\n    value: string\r\n}\r\ntype MetaType = {\r\n    active: boolean\r\n    asyncValidating: boolean\r\n    autofilled: boolean\r\n    dirty: boolean\r\n    dispatch: ()=>void\r\n    error: string\r\n    form: string\r\n    initial: undefined\r\n    invalid: boolean\r\n    pristine: boolean\r\n    submitFailed: boolean\r\n    submitting: boolean\r\n    touched: boolean\r\n    valid: boolean\r\n    visited: boolean\r\n    warning: undefined\r\n}\r\ntype PropsType = {\r\n    input: InputType\r\n    meta: MetaType\r\n    placeholder: string\r\n}\r\nexport const Textarea = ({input, meta,...props}: PropsType) => {\r\n    const hasError = meta.touched && meta.error\r\n    return <>\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport const Input = ({input, meta,...props}: PropsType) => {\r\n    const hasError = meta.touched && meta.error\r\n    return <>\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    </>\r\n}\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2UzE2\",\"dialogsItem\":\"Dialogs_dialogsItem__2JAAW\",\"nav\":\"Dialogs_nav__1Vkec\",\"dialog\":\"Dialogs_dialog__2Yy8q\",\"messages\":\"Dialogs_messages__1nxH5\"};","import React, {ComponentType} from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType =\r\n    {\r\n        isAuth: boolean\r\n    }\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'} />\r\n        return <Component {...restProps as T} />\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css'\r\nimport {DialogItemType} from \"../../../App\";\r\n\r\n\r\nexport const DialogItem: React.FC<DialogItemType> = props => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={props.avatar} alt=\"\"/>\r\n            <NavLink className={s.nav} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {MessageType} from \"../../../App\";\r\n\r\n\r\n\r\nexport function Message(props: MessageType) {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators\";\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea}\r\n                   name='newMessageBody'\r\n                   placeholder='Enter your message'\r\n                   validate={[required, maxLength50]}/>\r\n        </div>\r\n        <div>\r\n            <button>Send</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport default reduxForm<FormDataType>({form: 'DialogAddMessageForm'})(AddMessageForm)","import React from \"react\";\r\nimport {InitialStateDialogsType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    state: InitialStateDialogsType\r\n}\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        state: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React from \"react\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from \"./Message/Message\";\r\nimport {InitialStateDialogsType} from \"../../redux/dialogs-reducer\";\r\nimport AddMessageForm, {FormDataType} from \"./AddMessageForm\";\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = ({state, sendMessage}) => {\r\n\r\n    const dialogsElements = state.dialogs.map(d => <DialogItem id={d.id} name={d.name} avatar={d.avatar}/>)\r\n    const messagesElements = state.messages.map(m => <Message id={m.id} message={m.message}/>)\r\n    const addNewMessage = (formData: FormDataType) => {\r\n        sendMessage(formData.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype DialogsPropsType = {\r\n    state: InitialStateDialogsType\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n"],"sourceRoot":""}