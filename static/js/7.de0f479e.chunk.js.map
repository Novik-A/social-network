{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators.ts","components/Login/Login.tsx"],"names":["module","exports","Textarea","input","meta","props","hasError","touched","error","className","styles","formControl","Input","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","placeholder","name","validate","component","type","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,yJCkC9GC,EAAW,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAAQC,EAAsB,gCACrDC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OAAO,mCACH,sBAAKC,UAAWC,IAAOC,YAAc,KAAOL,EAAWI,IAAOF,MAAQ,IAAtE,UACI,8BACI,oDAAcL,GAAWE,MAE5BC,GAAY,+BAAOF,EAAKI,cAKxBI,EAAQ,SAAC,GAAuC,IAAtCT,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAAQC,EAAsB,gCAClDC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OAAO,mCACH,sBAAKC,UAAWC,IAAOC,YAAc,KAAOL,EAAWI,IAAOF,MAAQ,IAAtE,UACI,8BACI,iDAAWL,GAAWE,MAEzBC,GAAY,+BAAOF,EAAKI,e,iCCtDrC,oEAAO,IAAMK,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCNlC,oGA6CME,EAAiBC,YAA6B,CAACC,KAAM,SAApCD,EA3B2C,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcb,EAAW,EAAXA,MAC9E,OACI,uBAAMc,SAAUD,EAAhB,UACI,8BACI,cAAC,IAAD,CAAOE,YAAa,QAASC,KAAM,QAC5BC,SAAU,CAACZ,KACXa,UAAWd,QAEtB,8BACI,cAAC,IAAD,CAAOW,YAAa,WAAYC,KAAM,WAC/BG,KAAM,WAAYF,SAAU,CAACZ,KAC7Ba,UAAWd,QAEtB,gCACI,cAAC,IAAD,CAAOe,KAAM,WAAYH,KAAM,aAAcE,UAAWd,MAD5D,iBAGCJ,GAAS,qBAAKC,UAAWC,IAAOkB,iBAAvB,SACLpB,IAGL,8BACI,mDAgCDqB,uBAJS,SAACC,GAAD,MAA6C,CACjEC,OAAQD,EAAME,KAAKD,UAGkB,CAACE,WAA3BJ,EAjBmD,SAACxB,GAI/D,OAAIA,EAAM0B,OACC,cAAC,IAAD,CAAUG,GAAI,aAElB,qCACH,uCACA,cAAChB,EAAD,CAAgBI,SARH,SAACa,GACd9B,EAAM4B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.de0f479e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Nv7S\",\"error\":\"FormsControls_error__2VzmY\",\"formSummaryError\":\"FormsControls_formSummaryError__aOmkg\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\ntype InputType = {\r\n    name: string\r\n    onBlur: ()=>void\r\n    onChange: ()=>void\r\n    onDragStart: ()=>void\r\n    onDrop: ()=>void\r\n    onFocus: ()=>void\r\n    value: string\r\n}\r\ntype MetaType = {\r\n    active: boolean\r\n    asyncValidating: boolean\r\n    autofilled: boolean\r\n    dirty: boolean\r\n    dispatch: ()=>void\r\n    error: string\r\n    form: string\r\n    initial: undefined\r\n    invalid: boolean\r\n    pristine: boolean\r\n    submitFailed: boolean\r\n    submitting: boolean\r\n    touched: boolean\r\n    valid: boolean\r\n    visited: boolean\r\n    warning: undefined\r\n}\r\ntype PropsType = {\r\n    input: InputType\r\n    meta: MetaType\r\n    placeholder: string\r\n}\r\nexport const Textarea = ({input, meta,...props}: PropsType) => {\r\n    const hasError = meta.touched && meta.error\r\n    return <>\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport const Input = ({input, meta,...props}: PropsType) => {\r\n    const hasError = meta.touched && meta.error\r\n    return <>\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    </>\r\n}\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\n\r\n\r\nexport type LoginFormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n// type LoginFormDataTypeKeys = Extract<keyof LoginFormDataType, string>\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Email'} name={'email'}\r\n                       validate={[required]}\r\n                       component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'}\r\n                       type={'password'} validate={[required]}\r\n                       component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/>remember me\r\n            </div>\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormDataType>({form: 'login'})(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    return <>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect (mapStateToProps, {login}) (Login)"],"sourceRoot":""}