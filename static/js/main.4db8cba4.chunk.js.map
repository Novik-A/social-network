{"version":3,"sources":["api/api.ts","reportWebVitals.ts","redux/sidebar-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/NavbarItem/NavbarItem.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","index.tsx","redux/auth-reducer.ts","components/Navbar/Navbar.module.css","components/Header/Header.module.css","assets/images/preloader.gif","components/common/Preloader/Preloader.tsx","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/users-reducer.ts"],"names":["instance","axios","create","withCredentials","baseURL","headers","usersAPI","requestUsers","currentPage","pageSize","get","followUser","userId","post","unfollowUser","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","id","address","name","INITIALIZED_SUCCESS","initialized","rootReducer","combineReducers","sidebar","state","profilePage","profileReducer","dialogsPage","dialogsReducer","usersPage","usersReducer","auth","authReducer","app","action","type","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","NavbarItem","props","className","s","item","to","activeClassName","activeLink","NavbarContainer","connect","dispatch","sidebarElements","map","navbar","Header","isAuth","header","src","logo","alt","loginBlock","onClick","HeaderContainer","this","React","Component","DialogsContainer","lazy","ProfileContainer","UsersContainer","Login","App","initializeApp","fallback","Preloader","path","component","AppContainer","compose","promise","getAuthUserData","Promise","all","withRouter","AppForTest","ReactDOM","render","document","getElementById","SET_USER_DATA","payload","setAuthUserData","a","response","data","resultCode","module","exports","preloader","style","color","ADD_POST","SET_USER_PROFILE","SET_STATUS","posts","message","likes","profile","newPostText","addPostAC","setStatus","getUserProfile","dialogs","avatar","messages","body","newMessageBody","sendMessageAC","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_PROGRESS","users","totalUsersCount","portionSize","isFetching","followingInProgress","u","followed","totalCount","filter","followSuccessful","unfollowSuccessful","setCurrentPage","toggleIsFetching","toggleFollowingProgress","page","items","follow","unfollow"],"mappings":"uGAAA,kHAEMA,EAFN,OAEiBC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,0CAINC,EAAW,CACpBC,aADoB,SACNC,EAAqBC,GAC/B,OAAOT,EAASU,IAAT,qBAA2BF,EAA3B,kBAAgDC,KAE3DE,WAJoB,SAIRC,GACR,OAAOZ,EAASa,KAAT,iBAAsCD,GAAU,KAE3DE,aAPoB,SAONF,GACV,OAAOZ,EAASe,OAAT,iBAAwCH,MAI1CI,EAAa,CACtBC,WADsB,SACVL,GACR,OAAOZ,EAASU,IAAT,kBAAqCE,KAEhDM,UAJsB,SAIXN,GACP,OAAOZ,EAASU,IAAT,yBAAuCE,KAElDO,aAPsB,SAORC,GACV,OAAOpB,EAASqB,IAAT,iBAA6C,CAACD,OAAQA,MAIxDE,EAAU,CACnBC,GADmB,WAEf,OAAOvB,EAASU,IAAT,YAEXc,MAJmB,SAIZC,EAAeC,GAAuC,IAArBC,EAAoB,wDACxD,OAAO3B,EAASa,KAAT,aAA0C,CAACY,QAAOC,WAAUC,gBAEvEC,OAPmB,WAQf,OAAO5B,EAASe,OAAT,iB,4DC5BAc,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,+ECDRQ,EAAiC,CACnC,CAACC,GAAI,EAAGC,QAAS,UAAWC,KAAM,WAClC,CAACF,GAAI,EAAGC,QAAS,UAAWC,KAAM,YAClC,CAACF,GAAI,EAAGC,QAAS,OAAQC,KAAM,QAC/B,CAACF,GAAI,EAAGC,QAAS,QAASC,KAAM,SAChC,CAACF,GAAI,EAAGC,QAAS,WAAYC,KAAM,YACnC,CAACF,GAAI,EAAGC,QAAS,UAAWC,KAAM,WAClC,CAACF,GAAI,EAAGC,QAAS,QAASC,KAAM,SAChC,CAACF,GAAI,EAAGC,QAAS,QAASC,KAAM,U,gDCZ9BC,EAAsB,0BAEtBJ,EAAe,CACjBK,aAAa,GCqBbC,EAAcC,0BAAgB,CAC9BC,QFV0B,WAAqF,IAApFC,EAAmF,uDAAzDT,EACrD,OAAOS,GEUPC,YAAaC,IACbC,YAAaC,IACbC,UAAWC,IACXC,KAAMC,IACNC,IDxBsB,WAA2F,IAA1FT,EAAyF,uDAA5DT,EAAcmB,EAA8C,uCAChH,OAAQA,EAAOC,MACX,KAAKhB,EACD,OAAO,2BACAK,GADP,IAEIJ,aAAa,IAErB,QACI,OAAOI,ICiBfY,KAAMC,MAQKC,EAHDC,sBAAYlB,EAAamB,8BAAoBC,0BAAgBC,O,gCClCpE,SAASC,EAAWC,GACvB,OACI,qBAAKC,UAAWC,IAAEC,KAAlB,SACI,cAAC,IAAD,CAASC,GAAE,WAAMJ,EAAM3B,SAAWgC,gBAAiBH,IAAEI,WAArD,SAAkEN,EAAM1B,SCA7E,ICgBMiC,EAAkBC,aAXP,SAAC5B,GACrB,MAAO,CACHD,QAASC,EAAMD,YAGI,SAAC8B,GACxB,MAAO,KAKoBD,EDhBkB,SAACR,GAC9C,IAAMU,EAAkBV,EAAMrB,QAAQgC,KAAI,SAAAT,GAAC,OAAI,cAACH,EAAD,CAAY3B,GAAI8B,EAAE9B,GACRC,QAAS6B,EAAE7B,QACXC,KAAM4B,EAAE5B,MACH4B,EAAE9B,OAChE,OACI,qBAAK6B,UAAWC,IAAEU,OAAlB,SACKF,O,iBEXAG,EAA6C,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,OAAQzD,EAAmB,EAAnBA,MAAOI,EAAY,EAAZA,OACvE,OAAO,yBAAQwC,UAAWC,IAAEa,OAArB,UACH,qBAAKC,IAAK,6EACLf,UAAWC,IAAEe,KAAMC,IAAI,SAC5B,qBAAKjB,UAAWC,IAAEiB,WAAlB,SACKL,EACK,gCAAMzD,EAAN,MAAe,wBAAQ+D,QAAS3D,EAAjB,wBACf,cAAC,IAAD,CAAS2C,GAAI,SAAb,yBCLZiB,E,4JACF,WACI,OAAO,mCACH,cAAC,EAAD,eAAYC,KAAKtB,c,GAHCuB,IAAMC,WAcrBhB,eAPS,SAAC5B,GACrB,MAAO,CACHkC,OAAQlC,EAAMO,KAAK2B,OACnBzD,MAAOuB,EAAMO,KAAK9B,SAIe,CAACI,YAA3B+C,CAAqCa,G,QCN9CI,EAAmBC,gBAAK,kBAAM,uDAC9BC,EAAmBD,gBAAK,kBAAM,uDAC9BE,EAAiBF,gBAAK,kBAAM,iCAC5BG,EAAQH,gBAAK,kBAAM,uDAEnBI,E,uKACF,WACIR,KAAKtB,MAAM+B,kB,oBAGf,WACI,OAAKT,KAAKtB,MAAMxB,YAIZ,sBAAKyB,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAACM,EAAD,IACA,qBAAKN,UAAU,cAAf,SACI,cAAC,WAAD,CAAU+B,SAAU,cAACC,EAAA,EAAD,IAApB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CACIC,KAAK,WACLC,UAAWV,IAEf,cAAC,IAAD,CACIS,KAAK,oBACLC,UAAWR,IAEf,cAAC,IAAD,CACIO,KAAK,SACLC,UAAWP,IAEf,cAAC,IAAD,CACIM,KAAK,SACLC,UAAWN,cAvBxB,cAACI,EAAA,EAAD,Q,GAPDV,IAAMC,WA4ClBY,EAAeC,kBACjB7B,aALoB,SAAC5B,GAAD,MAA6C,CACjEJ,YAAaI,EAAMS,IAAIb,eAIE,CAACuD,cPvCD,kBAAiB,SAACtB,GAC3C,IAAI6B,EAAU7B,EAAS8B,eACvBC,QAAQC,IAAI,CAACH,IAAUzE,MAAK,WACvB4C,EANgC,CAAClB,KAAMhB,WO2C5CmE,IAFiBL,CAGnBP,GAEWa,EAAuB,WAChC,OAAO,mCACH,cAAC,IAAD,UACI,cAAC,IAAD,CAAUjD,MAAOA,EAAjB,SACI,cAAC0C,EAAD,W,eCnEhBQ,EAASC,OAAO,cAAC,EAAD,IACRC,SAASC,eAAe,SAOhCrF,K,mNCVMsF,EAAgB,qBAEhB7E,EAAe,CACjBC,GAAI,EACJd,MAAO,GACPD,MAAO,GACPyD,QAAQ,GAGC1B,EAAc,WAA+F,IAA9FR,EAA6F,uDAA9DT,EAAcmB,EAAgD,uCACrH,OAAQA,EAAOC,MACX,KAAKyD,EACD,OAAO,2BACApE,GACAU,EAAO2D,SAElB,QACI,OAAOrE,IAKNsE,EAAkB,eAAC9E,EAAD,uDAAc,EAAGd,EAAjB,uDAAiC,GAAID,EAArC,uDAAqD,GAAIyD,EAAzD,6CAA8E,CACzGvB,KAAMyD,EACNC,QAAS,CAAC7E,KAAId,QAAOD,QAAOyD,YAInByB,EAAkB,yDAAiB,WAAO9B,GAAP,uBAAA0C,EAAA,sEACrBhG,IAAQC,KADa,OAEX,KAD3BgG,EADsC,QAE/BC,KAAKC,aAAmB,EACRF,EAASC,KAAKA,KAAlCjF,EAD2B,EAC3BA,GAAId,EADuB,EACvBA,MAAOD,EADgB,EAChBA,MAChBoD,EAASyC,EAAgB9E,EAAId,EAAOD,GAAO,KAJH,2CAAjB,uDAOlBA,EAAQ,SAACC,EAAeC,EAAkBC,GAAlC,8CACjB,WAAOiD,GAAP,SAAA0C,EAAA,sEAC2BhG,IAAQE,MAAMC,EAAOC,EAAUC,GAD1D,OAEqC,IAFrC,OAEiB6F,KAAKC,YACd7C,EAAS8B,KAHjB,2CADiB,uDAOR9E,EAAS,yDAAiB,WAAOgD,GAAP,SAAA0C,EAAA,sEACZhG,IAAQM,SADI,OAEF,IAFE,OAEtB4F,KAAKC,YACd7C,EAASyC,EAAgB,EAAG,GAAI,IAAI,IAHL,2CAAjB,wD,mBC7CtBK,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,WAAa,6B,mBCA3FD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,OAAS,uBAAuB,WAAa,6B,2ECD5E,MAA0B,sC,OCG5BvB,EAAY,WACrB,OAAO,qCACH,qBAAKjB,IAAKyC,EAAWvC,IAAK,YAC1B,qBAAKwC,MAAO,CAACC,MAAO,eAApB,iC,6PCDFC,EAAW,mBACXC,EAAmB,2BACnBC,EAAa,qBAEb3F,EAAe,CACjB4F,MAAO,CACH,CAAC3F,GAAI,EAAG4F,QAAS,mBAAoBC,MAAO,GAC5C,CAAC7F,GAAI,EAAG4F,QAAS,qBAAuBC,MAAO,GAC/C,CAAC7F,GAAI,EAAG4F,QAAS,eAAgBC,MAAO,KAE5CC,QAAS,CACL,QAAW,GACX,SAAY,CACR,SAAY,GACZ,QAAW,KACX,GAAM,GACN,QAAW,GACX,UAAa,GACb,QAAW,KACX,OAAU,GACV,SAAY,MAEhB,gBAAkB,EAClB,0BAA6B,GAC7B,SAAY,GACZ,OAAU,EACV,OAAU,CACN,MAAS,GACT,MAAS,KAGjBjH,OAAQ,OAGC6B,EAAiB,WAA+F,IAA9FF,EAA6F,uDAA9DT,EAAcmB,EAAgD,uCACxH,OAAQA,EAAOC,MACX,KAAKqE,EACD,OAAO,2BACAhF,GADP,IAEImF,MAAM,GAAD,mBAAMnF,EAAMmF,OAAZ,CAAmB,CAAC3F,GAAI,GAAI4F,QAAS1E,EAAO6E,YAAaF,MAAO,OAE7E,KAAKJ,EACD,OAAO,2BAAIjF,GAAX,IAAkBsF,QAAS5E,EAAO4E,UACtC,KAAKJ,EACD,OAAO,2BAAIlF,GAAX,IAAkB3B,OAAQqC,EAAOrC,SACrC,QACI,OAAO2B,IAKNwF,EAAY,SAACD,GAAD,MAA0B,CAAC5E,KAAMqE,EAAUO,gBAEvDE,EAAY,SAACpH,GAAD,MAAqB,CAACsC,KAAMuE,EAAY7G,WAGpDqH,EAAiB,SAAC7H,GAAD,8CAA+B,WAAOgE,GAAP,eAAA0C,EAAA,sEAClCtG,IAAWC,WAAWL,GADY,OACnD2G,EADmD,OAEzD3C,GAN2ByD,EAMHd,EAASC,KANY,CAAC9D,KAAMsE,EAAkBK,aAIb,iCAJ/B,IAACA,IAI8B,OAA/B,uDAIjBnH,EAAY,SAACN,GAAD,8CAA+B,WAAOgE,GAAP,eAAA0C,EAAA,sEAC7BtG,IAAWE,UAAUN,GADQ,OAC9C2G,EAD8C,OAEpD3C,EAAS4D,EAAUjB,EAASC,OAFwB,2CAA/B,uDAIZrG,EAAe,SAACC,GAAD,8CAA+B,WAAOwD,GAAP,SAAA0C,EAAA,sEAChCtG,IAAWG,aAAaC,GADQ,OAEtB,IAFsB,OAE1CoG,KAAKC,YACd7C,EAAS4D,EAAUpH,IAHgC,2CAA/B,wD,uHCxDtBkB,EAAe,CACjBoG,QAAS,CACL,CAACnG,GAAI,EAAGE,KAAM,SAAUkG,OAAQ,0FAChC,CAACpG,GAAI,EAAGE,KAAM,SAAUkG,OAAQ,iIAChC,CAACpG,GAAI,EAAGE,KAAM,SAAUkG,OAAQ,uHAChC,CAACpG,GAAI,EAAGE,KAAM,QAASkG,OAAQ,4EAC/B,CAACpG,GAAI,EAAGE,KAAM,QAASkG,OAAQ,mGAC/B,CAACpG,GAAI,EAAGE,KAAM,QAASkG,OAAQ,wGAEnCC,SAAU,CACN,CAACrG,GAAI,EAAG4F,QAAS,MACjB,CAAC5F,GAAI,EAAG4F,QAAS,gBACjB,CAAC5F,GAAI,EAAG4F,QAAS,uBACjB,CAAC5F,GAAI,EAAG4F,QAAS,MACjB,CAAC5F,GAAI,EAAG4F,QAAS,sBACjB,CAAC5F,GAAI,EAAG4F,QAAS,SACjB,CAAC5F,GAAI,EAAG4F,QAAS,gBAMZhF,EAAiB,WAAmG,IAAlGJ,EAAiG,uDAAhET,EAAcmB,EAAkD,uCAC5H,OAAQA,EAAOC,MACX,IAAK,eACD,IAAMmF,EAAOpF,EAAOqF,eACpB,OAAO,2BACA/F,GADP,IAEI6F,SAAS,GAAD,mBAAM7F,EAAM6F,UAAZ,CAAsB,CAACrG,GAAI,EAAG4F,QAASU,OAEvD,QACI,OAAO9F,IAINgG,EAAgB,SAACD,GAAD,MAA6B,CAACpF,KAAM,eAAgBoF,oB,6PC5C3EE,EAAS,eACTC,EAAW,iBACXC,EAAY,kBACZC,EAAmB,yBACnBC,EAAwB,8BACxBC,EAAqB,2BACrBC,EAA4B,kCAE5BhH,EAAe,CACjBiH,MAAO,GACP9I,SAAU,GACV+I,gBAAiB,EACjBhJ,YAAa,EACbiJ,YAAa,GACbC,YAAY,EACZC,oBAAqB,IAGZtG,EAAe,WAA+F,IAA9FN,EAA6F,uDAA9DT,EAAcmB,EAAgD,uCACtH,OAAQA,EAAOC,MACX,KAAKsF,EACD,OAAO,2BACAjG,GADP,IAEIwG,MAAOxG,EAAMwG,MAAMzE,KAAI,SAAA8E,GAAC,OAAIA,EAAErH,KAAOkB,EAAO7C,OAAhB,2BAA6BgJ,GAA7B,IAAgCC,UAAU,IAAQD,OAEtF,KAAKX,EACD,OAAO,2BACAlG,GADP,IAEIwG,MAAOxG,EAAMwG,MAAMzE,KAAI,SAAA8E,GAAC,OAAIA,EAAErH,KAAOkB,EAAO7C,OAAhB,2BAA6BgJ,GAA7B,IAAgCC,UAAU,IAASD,OAEvF,KAAKV,EACD,OAAO,2BACAnG,GADP,IAEIwG,MAAO9F,EAAO8F,QAEtB,KAAKJ,EACD,OAAO,2BACApG,GADP,IAEIvC,YAAaiD,EAAOjD,cAE5B,KAAK4I,EACD,OAAO,2BACArG,GADP,IAEIyG,gBAAiB/F,EAAOqG,aAEhC,KAAKT,EACD,OAAO,2BACAtG,GADP,IAEI2G,WAAYjG,EAAOiG,aAE3B,KAAKJ,EACD,OAAO,2BACAvG,GADP,IAEI4G,oBAAqBlG,EAAOiG,WAAP,sBACX3G,EAAM4G,qBADK,CACgBlG,EAAO7C,SACtCmC,EAAM4G,oBAAoBI,QAAO,SAAAxH,GAAE,OAAIA,IAAOkB,EAAO7C,YAEnE,QACI,OAAOmC,IAKNiH,EAAmB,SAACpJ,GAAD,MAAqB,CAAC8C,KAAMsF,EAAQpI,WACvDqJ,EAAqB,SAACrJ,GAAD,MAAqB,CAAC8C,KAAMuF,EAAUrI,WAE3DsJ,EAAiB,SAAC1J,GAAD,MAA0B,CAACkD,KAAMyF,EAAkB3I,gBAEpE2J,EAAmB,SAACT,GAAD,MAA0B,CAAChG,KAAM2F,EAAoBK,eACxEU,EAA0B,SAACV,EAAqB9I,GAAtB,MAA0C,CAC7E8C,KAAM4F,EACNI,aACA9I,WAISL,EAAe,SAAC8J,EAAc5J,GAAf,8CAA+C,WAAOmE,GAAP,eAAA0C,EAAA,6DACvE1C,EAASuF,GAAiB,IAC1BvF,EAASsF,EAAeG,IAF+C,SAGhD/J,IAASC,aAAa8J,EAAM5J,GAHoB,OAGjE8G,EAHiE,OAIvE3C,EAASuF,GAAiB,IAC1BvF,GAhBqB2E,EAgBHhC,EAASC,KAAK8C,MAhBY,CAAC5G,KAAMwF,EAAWK,WAiB9D3E,GAf+BkF,EAeHvC,EAASC,KAAKsC,WAfa,CAACpG,KAAM0F,EAAuBU,gBASd,iCATzC,IAACA,EAFVP,IAWkD,OAA/C,uDAQfgB,EAAS,SAAC3J,GAAD,8CAA+B,WAAOgE,GAAP,SAAA0C,EAAA,6DACjD1C,EAASwF,GAAwB,EAAMxJ,IADU,SAE1BN,IAASK,WAAWC,GAFM,OAGhB,IAHgB,OAGpC4G,KAAKC,YACd7C,EAASoF,EAAiBpJ,IAE9BgE,EAASwF,GAAwB,EAAOxJ,IANS,2CAA/B,uDAQT4J,EAAW,SAAC5J,GAAD,8CAA+B,WAAOgE,GAAP,SAAA0C,EAAA,6DACnD1C,EAASwF,GAAwB,EAAMxJ,IADY,SAE5BN,IAASQ,aAAaF,GAFM,OAGlB,IAHkB,OAGtC4G,KAAKC,YACd7C,EAASqF,EAAmBrJ,IAEhCgE,EAASwF,GAAwB,EAAOxJ,IANW,2CAA/B,wD","file":"static/js/main.4db8cba4.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'fdde2ff6-05bd-41ac-ad86-490f6bc2a074'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    requestUsers (currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n    followUser (userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`, {})\r\n    },\r\n    unfollowUser (userId: number) {\r\n        return instance.delete<ResponseType>(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile (userId: string) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus (userId: string) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n    },\r\n    updateStatus (status: string) {\r\n        return instance.put<ResponseType>(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me () {\r\n        return instance.get<ResponseType>(`auth/me`)\r\n    },\r\n    login (email: string, password: string, rememberMe = false) {\r\n        return instance.post<ResponseType>(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout () {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n// types\r\ntype ResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        id?: number\r\n        email?: string\r\n        login?: string\r\n    }\r\n}\r\nexport type ProfileType = {\r\n    \"aboutMe\": string\r\n    \"contacts\": {\r\n        \"facebook\": string\r\n        \"website\": null\r\n        \"vk\": string\r\n        \"twitter\": string\r\n        \"instagram\": string\r\n        \"youtube\": null\r\n        \"github\": string\r\n        \"mainLink\": null\r\n    }\r\n    \"lookingForAJob\": boolean\r\n    \"lookingForAJobDescription\": string\r\n    \"fullName\": string\r\n    \"userId\": number\r\n    \"photos\": {\r\n        \"small\": string\r\n        \"large\": string\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {ActionsTypes} from \"./redux-store\";\r\n\r\nexport type NavbarItemType = {\r\n    id: number\r\n    address: string\r\n    name: string\r\n}\r\n\r\nconst initialState: NavbarItemType[] = [\r\n    {id: 1, address: 'profile', name: 'Profile'},\r\n    {id: 2, address: 'dialogs', name: 'Messages'},\r\n    {id: 3, address: 'news', name: 'News'},\r\n    {id: 4, address: 'music', name: 'Music'},\r\n    {id: 5, address: 'settings', name: 'Settings'},\r\n    {id: 6, address: 'friends', name: 'Friends'},\r\n    {id: 7, address: 'users', name: 'Users'},\r\n    {id: 8, address: 'login', name: 'Login'},\r\n]\r\n\r\nexport const sidebarReducer = (state: NavbarItemType[] = initialState, action: ActionsTypes): NavbarItemType[] => {\r\n    return state\r\n}","import {ActionsTypes} from \"./redux-store\";\r\nimport {ThunkType} from \"./users-reducer\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'app/INITIALIZED_SUCCESS'\r\n\r\nconst initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateAppType = initialState, action: ActionsTypes): InitialStateAppType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS}) as const\r\n\r\n// thunks\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise]).then(() => {\r\n         dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\n// types\r\nexport type InitialStateAppType = typeof initialState","import {applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {addPostAC, profileReducer, setUserProfile, setStatus} from \"./profile-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {dialogsReducer, sendMessageAC} from \"./dialogs-reducer\";\r\nimport {\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFetching,\r\n    toggleFollowingProgress,\r\n    usersReducer, followSuccessful, unfollowSuccessful\r\n} from \"./users-reducer\";\r\nimport {authReducer, setAuthUserData} from \"./auth-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport {appReducer, initializedSuccess} from \"./app-reducer\";\r\n\r\n\r\nexport type ActionsTypes = ReturnType<typeof initializedSuccess> |\r\n    ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof sendMessageAC> |\r\n    ReturnType<typeof followSuccessful> | ReturnType<typeof unfollowSuccessful> |\r\n    ReturnType<typeof setUsers> | ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> | ReturnType<typeof toggleIsFetching> |\r\n    ReturnType<typeof setUserProfile> | ReturnType<typeof setAuthUserData> |\r\n    ReturnType<typeof toggleFollowingProgress> | ReturnType<typeof setStatus>\r\n\r\nlet rootReducer = combineReducers({\r\n    sidebar: sidebarReducer,\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\nexport type ReduxStoreType = typeof store\r\n\r\nexport default store","import React from \"react\";\r\nimport s from './../Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {NavbarItemType} from \"../../../App\";\r\n\r\n\r\nexport function NavbarItem(props: NavbarItemType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <NavLink to={`/${props.address}`} activeClassName={s.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport {NavbarItem} from \"./NavbarItem/NavbarItem\";\r\nimport {NavbarItemType} from \"../../App\";\r\n\r\ntype NavbarPropsType = {\r\n    sidebar: Array<NavbarItemType>\r\n}\r\n\r\nexport const Navbar: React.FC<NavbarPropsType> = (props) => {\r\n    const sidebarElements = props.sidebar.map(s => <NavbarItem id={s.id}\r\n                                                             address={s.address}\r\n                                                             name={s.name}\r\n                                                             key={s.id} />)\r\n    return (\r\n        <nav className={s.navbar}>\r\n            {sidebarElements}\r\n        </nav>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Navbar} from \"./Navbar\";\r\nimport {NavbarItemType} from \"../../redux/sidebar-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    sidebar:  NavbarItemType[]\r\n}\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n\r\n        }\r\n}\r\n\r\nexport const NavbarContainer = connect (mapStateToProps, mapDispatchToProps) (Navbar)","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './Header.module.css'\r\nimport {HeaderContainerPropsType} from \"./HeaderContainer\";\r\n\r\nexport const Header: React.FC<HeaderContainerPropsType> = ({isAuth, login, logout}) => {\r\n    return <header className={s.header}>\r\n        <img src={'https://clipartstation.com/wp-content/uploads/2018/10/logo-clipart-png.png'}\r\n             className={s.logo} alt=\"logo\"/>\r\n        <div className={s.loginBlock}>\r\n            {isAuth\r\n                ? <div>{login} - <button onClick={logout}>Log out</button></div>\r\n                : <NavLink to={'/login'}>Login</NavLink>\r\n            }\r\n        </div>\r\n    </header>\r\n}","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n    render() {\r\n        return <>\r\n            <Header {...this.props}/>\r\n        </>\r\n    }\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, {logout}) (HeaderContainer)\r\n\r\n// types\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\nexport type HeaderContainerPropsType = MapStatePropsType & MapDispatchPropsType","import React, {lazy, Suspense} from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport store, {AppStateType, ReduxStoreType} from \"./redux/redux-store\";\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\nimport {NavbarContainer} from \"./components/Navbar/NavbarContainer\";\r\n// import UsersContainer from \"./components/Users/UsersContainer\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\n// import Login from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\n\r\nconst DialogsContainer = lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst UsersContainer = lazy(() => import('./components/Users/UsersContainer'));\r\nconst Login = lazy(() => import('./components/Login/Login'));\r\n\r\nclass App extends React.Component<AppContainerPropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <HeaderContainer/>\r\n                <NavbarContainer/>\r\n                <div className='App-content'>\r\n                    <Suspense fallback={<Preloader/>}>\r\n                        <Switch>\r\n                            <Route\r\n                                path='/dialogs'\r\n                                component={DialogsContainer}\r\n                            />\r\n                            <Route\r\n                                path='/profile/:userId?'\r\n                                component={ProfileContainer}\r\n                            />\r\n                            <Route\r\n                                path='/users'\r\n                                component={UsersContainer}\r\n                            />\r\n                            <Route\r\n                                path='/login'\r\n                                component={Login}\r\n                            />\r\n                        </Switch>\r\n                    </Suspense>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {initializeApp}),\r\n    withRouter\r\n)(App)\r\n\r\nexport const AppForTest: React.FC = () => {\r\n    return <>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </>\r\n}\r\n\r\n// types\r\nexport type AppContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype MapStatePropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nexport type NavbarItemType = {\r\n    id: number\r\n    address: string\r\n    name: string\r\n}\r\nexport type DialogItemType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likes: number\r\n}\r\ntype PostsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\ntype DialogsType = {\r\n    dialogs: Array<DialogItemType>\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n}\r\nexport type StateType = {\r\n    sidebar: Array<NavbarItemType>\r\n    profilePage: PostsType\r\n    dialogsPage: DialogsType\r\n}\r\n\r\nexport type StoreType = {\r\n    store: ReduxStoreType\r\n}\r\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {AppForTest} from \"./App\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nReactDOM.render(<AppForTest />,\r\n        document.getElementById('root')\r\n    );\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import {ActionsTypes} from \"./redux-store\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {ThunkType} from \"./users-reducer\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA'\r\n\r\nconst initialState = {\r\n    id: 0,\r\n    email: '',\r\n    login: '',\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateUsersType = initialState, action: ActionsTypes): InitialStateUsersType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAuthUserData = (id: number = 0, email: string = '', login: string = '', isAuth: boolean) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {id, email, login, isAuth}\r\n}) as const\r\n\r\n// thunks\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    const response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType =>\r\n    async (dispatch) => {\r\n        const response = await authAPI.login(email, password, rememberMe)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        }\r\n    }\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(0, '', '', false))\r\n    }\r\n}\r\n\r\n// types\r\nexport type InitialStateUsersType = typeof initialState\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__i3C7_\",\"item\":\"Navbar_item__3i9WY\",\"activeLink\":\"Navbar_activeLink__3bcyx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__2SxmC\",\"header\":\"Header_header__2I4Zj\",\"loginBlock\":\"Header_loginBlock__2NuNR\"};","export default __webpack_public_path__ + \"static/media/preloader.31518111.gif\";","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.gif\";\r\n\r\nexport const Preloader = () => {\r\n    return <>\r\n        <img src={preloader} alt={'Loading'}/>\r\n        <div style={{color: 'transparent'}}>/learn react/i</div>\r\n        </>\r\n}","import {ActionsTypes} from \"./redux-store\";\r\nimport {ThunkType} from \"./users-reducer\";\r\nimport {profileAPI} from \"../api/api\";\r\n\r\n\r\nconst ADD_POST = 'profile/ADD_POST'\r\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE'\r\nconst SET_STATUS = 'profile/SET_STATUS'\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likes: 5},\r\n        {id: 2, message: 'It\\'s my first post', likes: 3},\r\n        {id: 3, message: 'Hello, hello', likes: 10},\r\n    ] as PostType[],\r\n    profile: {\r\n        \"aboutMe\": '',\r\n        \"contacts\": {\r\n            \"facebook\": '',\r\n            \"website\": null,\r\n            \"vk\": '',\r\n            \"twitter\": '',\r\n            \"instagram\": '',\r\n            \"youtube\": null,\r\n            \"github\": '',\r\n            \"mainLink\": null\r\n        },\r\n        \"lookingForAJob\": false,\r\n        \"lookingForAJobDescription\": '',\r\n        \"fullName\": '',\r\n        \"userId\": 0,\r\n        \"photos\": {\r\n            \"small\": '',\r\n            \"large\": ''\r\n        }\r\n    },\r\n    status: '==='\r\n}\r\n\r\nexport const profileReducer = (state: InitialStatePostsType = initialState, action: ActionsTypes): InitialStatePostsType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 17, message: action.newPostText, likes: 1}],\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile: action.profile}\r\n        case SET_STATUS:\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const addPostAC = (newPostText: string) => ({type: ADD_POST, newPostText}) as const\r\nexport const setUserProfile = (profile: any) => ({type: SET_USER_PROFILE, profile}) as const\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status}) as const\r\n\r\n// thunks\r\nexport const getUserProfile = (userId: string): ThunkType => async (dispatch) => {\r\n    const response = await profileAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: string): ThunkType => async (dispatch) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\n// types\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nexport type InitialStatePostsType = typeof initialState","import {ActionsTypes} from \"./redux-store\";\r\n\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych', avatar: 'https://image.freepik.com/free-vector/samurai-esports-logo-for-your-team_116205-81.jpg'},\r\n        {id: 2, name: 'Victor', avatar: 'https://www.artmajeur.com/medias/standard/k/o/koldin-84/artwork/9533635_alone-anime-anime-art-anime-boy-favim-com-1898320.jpg'},\r\n        {id: 3, name: 'Valera', avatar: 'https://avatars.mds.yandex.net/get-zen_doc/3731867/pub_5f087e01d20c9b4c4ae96672_5f0c5edea04dd3125fdb5c13/scale_1200'},\r\n        {id: 4, name: 'Sveta', avatar: 'https://natelegram.ru/wp-content/uploads/2017/11/anime_art-1-320x320.jpg'},\r\n        {id: 5, name: 'Sasha', avatar: 'https://stezor-img-res.s3.eu-central-1.amazonaws.com/400x0/9dd99de0-75cb-43f1-a50c-d3082022e2a8'},\r\n        {id: 6, name: 'Ignat', avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQFUQOrSKlcwHsHyblQprAvdzlMc0eQa2RLoQ&usqp=CAU'}\r\n    ] as DialogItemType[],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'You are understand?'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'It\\'s my first post'},\r\n        {id: 6, message: 'Hello'},\r\n        {id: 7, message: 'Good night'},\r\n    ] as MessageType[]\r\n}\r\n\r\nexport type InitialStateDialogsType = typeof initialState\r\n\r\nexport const dialogsReducer = (state: InitialStateDialogsType = initialState, action: ActionsTypes): InitialStateDialogsType => {\r\n    switch (action.type) {\r\n        case \"SEND-MESSAGE\":\r\n            const body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (newMessageBody: string) => ({type: \"SEND-MESSAGE\", newMessageBody}) as const\r\n","import {ActionsTypes, AppStateType} from \"./redux-store\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = 'users/FOLLOW'\r\nconst UNFOLLOW = 'users/UNFOLLOW'\r\nconst SET_USERS = 'users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'users/TOGGLE_FOLLOWING_PROGRESS'\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 50,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    portionSize: 10,\r\n    isFetching: true,\r\n    followingInProgress: [] as number[]\r\n}\r\n\r\nexport const usersReducer = (state: InitialStateUsersType = initialState, action: ActionsTypes): InitialStateUsersType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u),\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u),\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const followSuccessful = (userId: number) => ({type: FOLLOW, userId}) as const\r\nexport const unfollowSuccessful = (userId: number) => ({type: UNFOLLOW, userId}) as const\r\nexport const setUsers = (users: UserType[]) => ({type: SET_USERS, users}) as const\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage}) as const\r\nexport const setTotalUsersCount = (totalCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalCount}) as const\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n}) as const\r\n\r\n// thunks\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    const response = await usersAPI.requestUsers(page, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(response.data.items))\r\n    dispatch(setTotalUsersCount(response.data.totalCount))\r\n}\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    const response = await usersAPI.followUser(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(followSuccessful(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    const response = await usersAPI.unfollowUser(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(unfollowSuccessful(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\n// types\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: { small: string | null, large: string }\r\n    status: string | null\r\n    followed: boolean\r\n}\r\nexport type InitialStateUsersType = typeof initialState\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, ActionsTypes>"],"sourceRoot":""}