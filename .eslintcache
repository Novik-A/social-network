[{"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\index.tsx":"1","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\reportWebVitals.ts":"2","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\App.tsx":"3","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Header\\Header.tsx":"4","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\Profile.tsx":"5","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Dialogs\\Dialogs.tsx":"6","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Navbar\\Navbar.tsx":"7","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"8","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"9","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"10","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Dialogs\\Message\\Message.tsx":"11","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"12","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\store.tsx":"13","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Navbar\\NavbarItem\\NavbarItem.tsx":"14","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\render.tsx":"15","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\profile-reducer.tsx":"16","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\dialogs-reducer.tsx":"17","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\sidebar-reducer.tsx":"18","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\redux-store.tsx":"19","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"20","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Dialogs\\DialogsContainer.tsx":"21","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\users-reducer.tsx":"22","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Users\\UsersContainer.tsx":"23","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Navbar\\NavbarContainer.tsx":"24","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Users\\Users.tsx":"25","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\common\\Preloader\\Preloader.tsx":"26","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\ProfileContainer.tsx":"27"},{"size":725,"mtime":1617532037048,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":499162500000,"results":"30","hashOfConfig":"29"},{"size":2302,"mtime":1618993216083,"results":"31","hashOfConfig":"29"},{"size":299,"mtime":1612791700850,"results":"32","hashOfConfig":"29"},{"size":437,"mtime":1618942998768,"results":"33","hashOfConfig":"29"},{"size":1566,"mtime":1617611641278,"results":"34","hashOfConfig":"29"},{"size":511,"mtime":1617532036919,"results":"35","hashOfConfig":"29"},{"size":643,"mtime":1618944180890,"results":"36","hashOfConfig":"29"},{"size":1304,"mtime":1617611324189,"results":"37","hashOfConfig":"29"},{"size":432,"mtime":1617611642296,"results":"38","hashOfConfig":"29"},{"size":229,"mtime":1613737817931,"results":"39","hashOfConfig":"29"},{"size":437,"mtime":1617611641870,"results":"40","hashOfConfig":"29"},{"size":4192,"mtime":1616576268288,"results":"41","hashOfConfig":"29"},{"size":389,"mtime":1613853830199,"results":"42","hashOfConfig":"29"},{"size":510,"mtime":1614789180048,"results":"43","hashOfConfig":"29"},{"size":1452,"mtime":1618944757788,"results":"44","hashOfConfig":"29"},{"size":2391,"mtime":1617608684185,"results":"45","hashOfConfig":"29"},{"size":668,"mtime":1617532036762,"results":"46","hashOfConfig":"29"},{"size":1273,"mtime":1618939526057,"results":"47","hashOfConfig":"29"},{"size":1138,"mtime":1617058764527,"results":"48","hashOfConfig":"29"},{"size":1092,"mtime":1617058764470,"results":"49","hashOfConfig":"29"},{"size":2230,"mtime":1618933908591,"results":"50","hashOfConfig":"29"},{"size":3734,"mtime":1618994037508,"results":"51","hashOfConfig":"29"},{"size":674,"mtime":1617532036930,"results":"52","hashOfConfig":"29"},{"size":1964,"mtime":1618940623694,"results":"53","hashOfConfig":"29"},{"size":188,"mtime":1618932107033,"results":"54","hashOfConfig":"29"},{"size":1438,"mtime":1618994731073,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"zntbtv",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\index.tsx",[],["120","121"],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\reportWebVitals.ts",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\App.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Header\\Header.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\Profile.tsx",["122"],"import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nexport function Profile() {\r\n    return (\r\n        <div>\r\n            <ProfileInfo />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Dialogs\\Dialogs.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Navbar\\Navbar.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["123"],"import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\n\r\n\r\n\r\nexport const ProfileInfo = (props: ProfilePropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <img className={s.bg} src={\"https://i.pinimg.com/originals/fd/ba/44/fdba444cffb79e04129e80a43e9d0f34.jpg\"} alt=\"\"/>\r\n            <div className={s.description}>\r\n                <img src={props.profile.photos.large}/>\r\n                ava+description\r\n            </div>\r\n        </div>\r\n    )\r\n}","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Dialogs\\Message\\Message.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\store.tsx",["124"],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Navbar\\NavbarItem\\NavbarItem.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\render.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\profile-reducer.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\dialogs-reducer.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\sidebar-reducer.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\redux-store.tsx",[],"F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["125"],"import React, {ChangeEvent} from \"react\";\r\nimport {\r\n    addPostActionCreator,\r\n    PostType,\r\n    updatePostActionCreator\r\n} from \"../../../Redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator())\r\n        },\r\n        updateNewPostText: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            dispatch(updatePostActionCreator(e))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts)","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Dialogs\\DialogsContainer.tsx",["126"],"import React, {ChangeEvent} from \"react\";\r\nimport {\r\n    InitialStateDialogsType,\r\n    sendMessageActionCreator,\r\n    updateMessageActionCreator\r\n} from \"../../Redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport { Dispatch } from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    state: InitialStateDialogsType\r\n}\r\ntype MapDispatchPropsType = {\r\n    sendMessage: () => void\r\n    updateMessage: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        state: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(sendMessageActionCreator())\r\n        },\r\n        updateMessage: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            dispatch(updateMessageActionCreator(e))\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = connect (mapStateToProps, mapDispatchToProps) (Dialogs)","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\Redux\\users-reducer.tsx",["127"],"import {ActionsTypes} from \"./redux-store\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: {small: string | null, large: string }\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false\r\n}\r\n\r\nexport type InitialStateUsersType = typeof initialState\r\n\r\nexport const usersReducer = (state: InitialStateUsersType = initialState, action: ActionsTypes): InitialStateUsersType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userID ? {...u, followed: true} : u),\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userID ? {...u, followed: false} : u),\r\n            }\r\n        case \"SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followAC = (userID: number) => ({type: \"FOLLOW\", userID}) as const\r\nexport const unfollowAC = (userID: number) => ({type: \"UNFOLLOW\", userID}) as const\r\nexport const setUsersAC = (users: UserType[]) => ({type: \"SET_USERS\", users}) as const\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: \"SET_CURRENT_PAGE\", currentPage}) as const\r\nexport const setTotalUsersCountAC = (totalCount: number) => ({type: \"SET_TOTAL_USERS_COUNT\", totalCount}) as const\r\nexport const toggleIsFetchingAC = (isFetching: boolean) => ({type: \"TOGGLE_IS_FETCHING\", isFetching}) as const\r\n","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Users\\UsersContainer.tsx",["128"],"import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    UserType\r\n} from \"../../Redux/users-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport axios from \"axios\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\ntype UsersContainerPropsType = {\r\n    users: UserType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setUsers: (users: UserType[]) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersContainerPropsType> {\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(response.data.items)\r\n            this.props.setTotalUsersCount(response.data.totalCount)\r\n        })\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber)\r\n        this.props.toggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(response.data.items)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader /> : null}\r\n            <Users users={this.props.users}\r\n                   pageSize={this.props.pageSize}\r\n                   totalUsersCount={this.props.totalUsersCount}\r\n                   currentPage={this.props.currentPage}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   onPageChanged={this.onPageChanged}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\ntype MapStatePropsType =\r\n    {\r\n        users: UserType[]\r\n        pageSize: number\r\n        totalUsersCount: number\r\n        currentPage: number\r\n        isFetching: boolean\r\n    }\r\n// type MapDispatchPropsType =\r\n//     {\r\n//         follow: (userID: number) => void\r\n//         unfollow: (userID: number) => void\r\n//         setUsers: (users: UserType[]) => void\r\n//         setCurrentPage: (currentPage: number) => void\r\n//         setTotalUsersCount: (totalCount: number) => void\r\n//         toggleIsFetching: (isFetching: boolean) => void\r\n//     }\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n// const mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n//     return {\r\n//         follow: (userID: number) => {\r\n//             dispatch(followAC(userID))\r\n//         },\r\n//         unfollow: (userID: number) => {\r\n//             dispatch(unfollowAC(userID))\r\n//         },\r\n//         setUsers: (users: UserType[]) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (currentPage: number) => {\r\n//             dispatch(setCurrentPageAC(currentPage))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setTotalUsersCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default connect(mapStateToProps, {follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching})(UsersContainer)","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Navbar\\NavbarContainer.tsx",["129"],"import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {Navbar} from \"./Navbar\";\r\nimport {NavbarItemType} from \"../../Redux/sidebar-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    sidebar:  NavbarItemType[]\r\n}\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n\r\n        }\r\n}\r\n\r\nexport const NavbarContainer = connect (mapStateToProps, mapDispatchToProps) (Navbar)","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Users\\Users.tsx",["130"],"import React from 'react';\r\nimport s from './Users.module.css'\r\nimport {UserType} from \"../../Redux/users-reducer\";\r\nimport userPhoto from '../../assets/images/avatar.png'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype UsersPropsType = {\r\n    users: UserType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p ? s.selectedPage : s.pages}\r\n                             onClick={() => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{`${p} `}</span>\r\n            })}\r\n        </div>\r\n        {props.users.map(u => <div key={u.id}>\r\n            <div>\r\n                <div className={s.avatar}>\r\n                    <NavLink to={'/profile/' + u.id}>\r\n                    <img src={u.photos.small !== null ? u.photos.small : userPhoto}/>\r\n                    </Nav Link>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button onClick={() => {\r\n                            props.unfollow(u.id)\r\n                        }}>Follow</button>\r\n                        : <button onClick={() => {\r\n                            props.follow(u.id)\r\n                        }}>Unfollow</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                </div>\r\n            </div>\r\n        </div>)}\r\n    </div>;\r\n}","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\common\\Preloader\\Preloader.tsx",["131"],"import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.gif\";\r\n\r\nexport const Preloader = () => {\r\n    return <>\r\n        <img src={preloader}/>\r\n        </>\r\n}","F:\\it-incubator\\react-way\\projects\\01-project\\social-network\\src\\components\\Profile\\ProfileContainer.tsx",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":2,"column":8,"nodeType":"138","messageId":"139","endLine":2,"endColumn":9},{"ruleId":"140","severity":1,"message":"141","line":16,"column":17,"nodeType":"142","endLine":16,"endColumn":56},{"ruleId":"136","severity":1,"message":"143","line":1,"column":8,"nodeType":"138","messageId":"139","endLine":1,"endColumn":13},{"ruleId":"136","severity":1,"message":"143","line":1,"column":8,"nodeType":"138","messageId":"139","endLine":1,"endColumn":13},{"ruleId":"136","severity":1,"message":"143","line":1,"column":8,"nodeType":"138","messageId":"139","endLine":1,"endColumn":13},{"ruleId":"136","severity":1,"message":"144","line":2,"column":9,"nodeType":"138","messageId":"139","endLine":2,"endColumn":20},{"ruleId":"136","severity":1,"message":"145","line":3,"column":9,"nodeType":"138","messageId":"139","endLine":3,"endColumn":17},{"ruleId":"136","severity":1,"message":"143","line":1,"column":8,"nodeType":"138","messageId":"139","endLine":1,"endColumn":13},{"ruleId":"140","severity":1,"message":"141","line":36,"column":21,"nodeType":"142","endLine":36,"endColumn":86},{"ruleId":"140","severity":1,"message":"141","line":6,"column":9,"nodeType":"142","endLine":6,"endColumn":31},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"@typescript-eslint/no-unused-vars","'s' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'React' is defined but never used.","'ChangeEvent' is defined but never used.","'Dispatch' is defined but never used.","no-global-assign","no-unsafe-negation"]